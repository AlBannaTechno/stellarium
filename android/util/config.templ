#!/bin/bash

#   ***************************************************************************
#     config.conf - configuration for building Android Stellarium port
#      --------------------------------------
#
#      based on Marco Bernasocchi's android QGIS scripts
#
#   ***************************************************************************
#   *                                                                         *
#   *   This program is free software; you can redistribute it and/or modify  *
#   *   it under the terms of the GNU General Public License as published by  *
#   *   the Free Software Foundation; either version 2 of the License, or     *
#   *   (at your option) any later version.                                   *
#   *                                                                         *
#   ***************************************************************************/

echo ""
set -e
#######check if config was already loaded#######
if [ ! -n "${STELLARIUM_ANDROID_CONF_LOADED+x}" ]; then
  #############################
  #######CONFIGURE HERE########
  #############################
  
  #Set these paths to match the appropriate paths on your own system
  export NECESSITAS_DIR=$HOME/dev/necessitas
  export ROOT_DIR=$HOME/dev/stellarium
  
  #DEFAULT_ANDROID_TARGET_ARCH:
  #   armeabi
  #   armeabi-v7a - faster, may not work on older hardware or emulators
  DEFAULT_ANDROID_TARGET_ARCH=armeabi-v7a
  
  export BUILD_TYPE=Debug
  
  export ADB_WIRELESS=false
  #export ADB_WIRELESS=192.168.0.147:5555
  
  #CMake isn't finding necessitas' Qt libraries automatically. This *may* just be a Windows-thing
  #setting this to true sets the paths for each library manually,
  # according to necessitas' Windows directory structure; it may break on other OSs
  export WINDOWS=true
  
  #This is may be set already
  #if not, set it outside or in here, either way it should point to the JDK root dir, *not* the JRE
  #export JAVA_HOME=/c/Program\ Files/Java/jdk1.6.0_30/
  
  #not needed if these are already in your path
  #export PATH=$NECESSITAS_DIR/apache-ant-1.8.2/bin:$NECESSITAS_DIR/android-sdk/tools:$PATH
  
  ######_LIKELY_ DON'T NEED TO CONFIGURE FURTHER######
  
  #passing ANDROID_TARGET_ARCH=armeabi-v7a when calling a script will override the default
  #for example ANDROID_TARGET_ARCH=armeabi-v7a ./build-all.sh
  if [ ! -n "${ANDROID_TARGET_ARCH+x}" ]; then
    export ANDROID_TARGET_ARCH=$DEFAULT_ANDROID_TARGET_ARCH
  fi
  
  export ANDROID_SDK_ROOT=$NECESSITAS_DIR/android-sdk
  export ANDROID_NDK_ROOT=$NECESSITAS_DIR/android-ndk-r6b
  export ANDROID_NDK=$NECESSITAS_DIR/android-ndk-r6b
  export QT_ROOT=$NECESSITAS_DIR/Android/Qt/480/$ANDROID_TARGET_ARCH
    
  export SCRIPT_DIR=$ROOT_DIR/android/util
  export STEL_BUILD_DIR=$ROOT_DIR/builds/$ANDROID_TARGET_ARCH
  export INSTALL_DIR=$ROOT_DIR/builds/$ANDROID_TARGET_ARCH-out
  export ANDROID_LEVEL=9
  export ANDROID_NDK_PLATFORM=android-$ANDROID_LEVEL
  export ANDROID_NDK_HOST=linux-x86
  export ANDROID_NDK_TOOLCHAIN_PREFIX=arm-linux-androideabi
  export ANDROID_NDK_TOOLCHAIN_VERSION=4.4.3
  #export ANDROID_NDK_TOOLCHAIN_ROOT=$NECESSITAS_DIR/$ANDROID_NDK_PLATFORM-standalonetoolchain
#  export QT_SRC=$NECESSITAS_DIR/Android/Qt/480/qt-src
  export QT_INCLUDE=$QT_ROOT/include
  export QMAKE=$QT_ROOT/bin/qmake
  export APK_DIR=$ROOT_DIR/android/java
  
  #setting compilers names
  #see https://groups.google.com/forum/?hl=en#!topic/android-ndk/DVNS_mQHxdA
  #export PATH=$ANDROID_NDK_TOOLCHAIN_ROOT/bin:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH
  export PATH=$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH
  export CC=arm-linux-androideabi-gcc
  export CXX=arm-linux-androideabi-g++
  export LD=arm-linux-androideabi-ld
  export AR=arm-linux-androideabi-ar
  export RANLIB=arm-linux-androideabi-ranlib
  export AS=arm-linux-androideabi-as

  export MY_STD_CONFIGURE_FLAGS="--prefix=$INSTALL_DIR --host=arm-linux-androideabi"
  #FPU (floating point unit)FLAG:
  #see http://gcc.gnu.org/onlinedocs/gcc-4.4.3/gcc/ARM-Options.html
  #see http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0408f/index.html
  #see NDK docs/STANDALONE-TOOLCHAIN.html
  #for generic MY_FPU=vfp
  MY_FPU=vfp
  #for tegra processors (xoom, transformer, iconia, galaxy tab)
  #MY_FPU=vfpv3-d16
  #for hummingbird and neon supporting processors (galaxy phone) -mfpu=neon
  #MY_FPU=neon
  ARMV7A_flags=" -march=armv7-a -mfloat-abi=softfp -mfpu=$MY_FPU"

  #TODO check ALL_FLAGS if other flags re needed
  #ALL_FLAGS="-c -Wno-psabi -mthumb -march=armv7-a -mfloat-abi=softfp -mfpu=vfp -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-short-enums -DANDROID -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -Wa,--noexecstack -DQT_NO_QWS_TRANSFORMED -O2 -Os -g -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 -D_REENTRANT -Wall -Wno-psabi -W -fPIC -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED -I/opt/necessitas/Android/Qt/4762/armeabi-v7a/mkspecs/default -I../../qwt-5.2.0/src -I/opt/necessitas/Android/Qt/4762/armeabi-v7a/include/QtCore -I/opt/necessitas/Android/Qt/4762/armeabi-v7a/include/QtGui -I/opt/necessitas/Android/Qt/4762/armeabi-v7a/include -Imoc -I. -I/opt/necessitas/android-ndk-r5c/platforms/android-8/arch-arm/usr/include -I/opt/necessitas/android-ndk-r5c/sources/cxx-stl/gnu-libstdc++/include -I/opt/necessitas/android-ndk-r5c/sources/cxx-stl/gnu-libstdc++/libs/armeabi/include -I."
  #export MY_STD_CFLAGS="$MY_STD_CFLAGS" #-D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -D__ARM_ARCH_7-A__"
  export MY_STD_CFLAGS="-DANDROID=ON -Wno-psabi -mthumb -G -O0 -ggdb "
  if [ "$ANDROID_TARGET_ARCH" = "armeabi-v7a" ]; then
    export MY_STD_CFLAGS=$MY_STD_CFLAGS$ARMV7A_flags
  fi
  export MY_STD_CXXFLAGS="$MY_STD_CFLAGS -std=gnu++0x -g"
  export MY_STD_LDFLAGS="-Wl,--fix-cortex-a8 "

  #############################
  #######END CONFIGURE#########
  #############################

  #######mark conf as loaded#######
  export STELLARIUM_ANDROID_CONF_LOADED=1
fi
